%%{
#include "zeek/storage/Backend.h"
#include "zeek/storage/Manager.h"

using namespace zeek;
using namespace zeek::storage;
%%}

module Storage;

# Generated when a new backend connection is opened
event Storage::backend_opened%(%);

# Generated when a backend connection is lost
event Storage::backend_lost%(%);

function Storage::__open_backend%(btype: Storage::Backend, options: any, key_type: any, val_type: any%): opaque of Storage::BackendHandle
	%{
	auto btype_val = IntrusivePtr<EnumVal>{NewRef{}, btype->AsEnumVal()};
	Tag tag{btype_val};

	auto kt = key_type->AsTypeVal()->GetType()->AsTypeType()->GetType();
	auto vt = val_type->AsTypeVal()->GetType()->AsTypeType()->GetType();

	auto options_val = IntrusivePtr<RecordVal>{NewRef{}, options->AsRecordVal()};
	auto b = storage_mgr->OpenBackend(tag, options_val, kt, vt);

	if ( ! b.has_value() ) {
		emit_builtin_error(b.error().c_str());
		return val_mgr->Bool(false);
	}

	return make_intrusive<storage::detail::BackendHandleVal>(b.value());
	%}

function Storage::__close_backend%(backend: opaque of Storage::BackendHandle%) : bool
	%{
	auto b = dynamic_cast<storage::detail::BackendHandleVal*>(backend);
	if ( ! b ) {
		emit_builtin_error("Invalid storage handle", backend);
		return val_mgr->Bool(false);
	}
	else if ( ! b->backend->IsOpen() )
		// Return true here since the backend is already closed
		return val_mgr->Bool(true);

	storage_mgr->CloseBackend(b->backend);

	return val_mgr->Bool(true);
	%}

function Storage::__put%(backend: opaque of Storage::BackendHandle, key: any, value: any,
                         overwrite: bool, expire_time: interval%): bool
	%{
	auto b = dynamic_cast<storage::detail::BackendHandleVal*>(backend);
	if ( ! b ) {
		emit_builtin_error("Invalid storage handle", backend);
		return val_mgr->Bool(false);
	}
	else if ( ! b->backend->IsOpen() )
		return val_mgr->Bool(false);

	// TODO: add support for when statements (see broker/store.bif)

	auto key_v = IntrusivePtr<Val>{NewRef{}, key};
	auto val_v = IntrusivePtr<Val>{NewRef{}, value};
	auto result = b->backend->Put(key_v, val_v, overwrite, expire_time);
	if ( result.has_value() ) {
		emit_builtin_error(util::fmt("Failed to store data: %s", result.value().c_str()));
		return val_mgr->Bool(false);
	}

	return val_mgr->Bool(true);
	%}

function Storage::__get%(backend: opaque of Storage::BackendHandle, key: any%): any
	%{
	auto b = dynamic_cast<storage::detail::BackendHandleVal*>(backend);
	if ( ! b ) {
		emit_builtin_error("Invalid storage handle", backend);
		return val_mgr->Bool(false);
	}
	else if ( ! b->backend->IsOpen() )
		return val_mgr->Bool(false);

	// TODO: add support for when statements (see broker/store.bif)

	auto key_v = IntrusivePtr<Val>{NewRef{}, key};
	auto result = b->backend->Get(key_v);
	if ( ! result.has_value() ) {
		emit_builtin_error(util::fmt("Failed to retrieve data: %s", result.error().c_str()));
		return val_mgr->Bool(false);
	}

	return result.value();
	%}

function Storage::__erase%(backend: opaque of Storage::BackendHandle, key: any%): bool
	%{
	auto b = dynamic_cast<storage::detail::BackendHandleVal*>(backend);
	if ( ! b ) {
		emit_builtin_error("Invalid storage handle", backend);
		return val_mgr->Bool(false);
	}
	else if ( ! b->backend->IsOpen() )
		return val_mgr->Bool(false);

	// TODO: add support for when statements (see broker/store.bif)

	auto key_v = IntrusivePtr<Val>{NewRef{}, key};
	auto result = b->backend->Erase(key_v);
	if ( result.has_value() ) {
		emit_builtin_error(util::fmt("Failed to erase data for key: %s", result.value().c_str()));
		return val_mgr->Bool(false);
	}

	return val_mgr->Bool(true);
	%}
